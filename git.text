GIT:
INSTALACION DE GIT: 
Paso 1: instalar homebrew
Paso 2: ir a la terminal y escribir el comando (brew Install git). 


COMO COMPROBAR INSTALACION DE GIT: Escribir comando (git).


VER VERSION DE GIT: 
Escribir comando 
(git --version).


VER COMANDOS DE GIT: 
Escribir comando 
(git --help).


QUE ES GIT:
git es un sistema de control de versiones.

SACAR CARPETAS OCULTAS:(comand mayusculas  )

COMANDOS DE GIT:
ls: Listar todos los directorios y ficheros. 

cd: Movernos entre directorios y ficheros.

pwd: Ver en la ruta que estamos. 

mkdir "nombre de la carpeta": Crear carpeta.


clear: Limpiar la consola. 

git config --global user.name "nombre de usuario": configuración inicial de git, donde indicamos el nombre de usuario a nivel global de nuestra maquina local.

git config --global user.name "nombre de usuario": configuración inicial de git, donde indicamos el nombre de email a nivel global de nuestra maquina local.

git config user.name "nombre de usuario": configuración inicial de git, donde indicamos el nombre de email a nivel local de nuestro directorio.

git config user.name "nombre de email": configuración inicial de git, donde indicamos el nombre de email a nivel local de nuestro directorio.

touch: crear fichero.

git init: inicializar git en un directorio. 

git branch -m name: cambiar nombre de la rama master.

git status: ver el estado de un fichero. 

git add: agregar un fichero al estado de preparación.

git log: sirve para ver todos los commit.

git commit: hacer un guardado de una version de un fichero.

git commit -m "namecommit": hacer un guardado de una version de un fichero.

git checkout name: volver a una version en espesifico de un fichero. 

git reset: volver a la ultima version de un fichero

git log --graph: sirve para ver todos los commit.

git log --graph --pretty=oneline: sirve para ver todos los commit.

git log --graph --decorate --all --oneline: sirve para ver todos los commit.

git config --global alias.namealias "log --graph --decorate --all --oneline": Es un git log personalizado que podemos ver.

git config  alias.namealias "log --graph --decorate --all --oneline":Es un git log personalizado que podemos ver.


touch .gitignore: ignorar un fichero.

git diff namebranch: ver todos los cambios que uno a echo en un fichero

git reset --hard commitid: volver a una versión en espesifica y borra todo lo demás de adelante.

git reflog: historial completo de interacciones.

git tag nametag: establecer un punto fijo de una version.

git checkout tags/nametag:  volver a una version en especifico marcado por un tag.

git branch namebranch: crear una rama.

git branch -d namebranch: borrar una rama.

git switch namebranch: cambiar de rama.

git merge namebranch: combinar los cambios.

git stash: guardar algo temporalmente.

git stash list: ver un listado de los stash. 

git stash pop: recuperar lo que uno a guardado de forma temporal.

git stash drop: eliminar un stash. 

git push -u origin branch o commit: subir proyecto a github. 

GITHUB:
COMO INICIAR SESION EN GITHUB: nombre de usuario, email, contraseña.

PAGINA DE DOCUMENTACION DE GITHUB: docs.github.com.

COMPROBAR CLAVE SSH: ls -al ~/.ssh.

CREAR CLAVE SSH: meterse al directorio ssh en terminal poner comando (ssh-keygen -t ed25519 -C "your_email@example.com") poner nombre de la clave ssh y crear fichero ssh de configuración (touch ~/.ssh/config) y meterse al fichero ssh de configuracion y poner (Host github.com
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/nombre de la clave) y poner este comando en la terminal (Host github.com
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/nombre de la clave) y ir a los ajustes de GitHub y pulsamos el boton (ssh and gpg keys) y uno pulsa (new ssh key) y despues copiamos la clave ssh publica y la pegamos donde sale key y pulsamos el boton (add ssh key)
Y vamos a la terminal y escribimos el comando (ssh -T git@github.com) y si sale Hi lauxa-dev! You've successfully authenticated, but GitHub does not provide shell access.
Esta listo y si sale otra cosa escribimos yes.

CREAR UN REPOSITORIO: acer clic en el boton new (si es primer repositorio poner poner nombre de usuario) y ponemos el comando (git remote add origin git@github.com:nombre de usuario/nombre de repositorio.git) y despues ponemos el comando (git push -u origin rama maestra)




























